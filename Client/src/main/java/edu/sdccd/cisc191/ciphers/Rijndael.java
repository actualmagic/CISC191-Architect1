package edu.sdccd.cisc191.ciphers;

import java.util.Arrays;

public class Rijndael {
    private static final byte[] S_BOX = {
            0x63, 0x7C, 0x77, 0x7B, (byte)0xF2, 0x6B, 0x6F, (byte)0xC5, 0x30, 0x01, 0x67, 0x2B, (byte)0xFE, (byte)0xD7, (byte)0xAB, 0x76,
            (byte)0xCA, (byte)0x82, (byte)0xC9, (byte)0x7D, (byte)0xFA, 0x59, 0x47, (byte)0xF0, (byte)0xAD, (byte)0xD4, (byte)0xA2, (byte)0xAF, (byte)0x9C, (byte)0xA4, 0x72, (byte)0xC0,
            (byte)0xB7, (byte)0xFD, (byte)0x93, 0x26, 0x36, 0x3F, (byte)0xF7, (byte)0xCC, 0x34, (byte)0xA5, (byte)0xE5, (byte)0xF1, 0x71, (byte)0xD8, 0x31, 0x15,
            0x04, (byte)0xC7, 0x23, (byte)0xC3, 0x18, (byte)0x96, 0x05, (byte)0x9A, 0x07, 0x12, (byte)0x80, (byte)0xE2, (byte)0xEB, 0x27, (byte)0xB2, 0x75,
            0x09, (byte)0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, (byte)0xA0, 0x52, 0x3B, (byte)0xD6, (byte)0xB3, 0x29, (byte)0xE3, 0x2F, (byte)0x84,
            0x53, (byte)0xD1, 0x00, (byte)0xED, 0x20, (byte)0xFC, (byte)0xB1, 0x5B, 0x6A, (byte)0xCB, (byte)0xBE, 0x39, 0x4A, 0x4C, 0x58, (byte)0xCF,
            (byte)0xD0, (byte)0xEF, (byte)0xAA, (byte)0xFB, 0x43, 0x4D, 0x33, (byte)0x85, 0x45, (byte)0xF9, 0x02, 0x7F, 0x50, 0x3C, (byte)0x9F, (byte)0xA8,
            0x51, (byte)0xA3, 0x40, (byte)0x8F, (byte)0x92, (byte)0x9D, 0x38, (byte)0xF5, (byte)0xBC, (byte)0xB6, (byte)0xDA, 0x21, 0x10, (byte)0xFF, (byte)0xF3, (byte)0xD2,
            (byte)0xCD, 0x0C, 0x13, (byte)0xEC, 0x5F, (byte)0x97, 0x44, 0x17, (byte)0xC4, (byte)0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, (byte)0x81, 0x4F, (byte)0xDC, 0x22, 0x2A, (byte)0x90, (byte)0x88, 0x46, (byte)0xEE, (byte)0xB8, 0x14, (byte)0xDE, 0x5E, 0x0B, (byte)0xDB,
            (byte)0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, (byte)0xC2, (byte)0xD3, (byte)0xAC, 0x62, (byte)0x91, (byte)0x95, (byte)0xE4, 0x79,
            (byte)0xE7, (byte)0xC8, 0x37, 0x6D, (byte)0x8D, (byte)0xD5, 0x4E, (byte)0xA9, 0x6C, 0x56, (byte)0xF4, (byte)0xEA, 0x65, 0x7A, (byte)0xAE, 0x08,
            (byte)0xBA, 0x78, 0x25, 0x2E, 0x1C, (byte)0xA6, (byte)0xB4, (byte)0xC6, (byte)0xE8, (byte)0xDD, 0x74, 0x1F, 0x4B, (byte)0xBD, (byte)0x8B, (byte)0x8A,
            0x70, 0x3E, (byte)0xB5, 0x66, 0x48, 0x03, (byte)0xF6, 0x0E, 0x61, 0x35, 0x57, (byte)0xB9, (byte)0x86, (byte)0xC1, 0x1D, (byte)0x9E,
            (byte)0xE1, (byte)0xF8, (byte)0x98, 0x11, 0x69, (byte)0xD9, (byte)0x8E, (byte)0x94, (byte)0x9B, 0x1E, (byte)0x87, (byte)0xE9, (byte)0xCE, 0x55, 0x28, (byte)0xDF,
            (byte)0x8C, (byte)0xA1, (byte)0x89, 0x0D, (byte)0xBF, (byte)0xE6, 0x42, 0x68, 0x41, (byte)0x99, 0x2D, 0x0F, (byte)0xB0, 0x54, (byte)0xBB, 0x16};
    private static final byte[] GALOIS_MULT2 = {
            0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
            0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
            0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
            0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
            (byte)0x80, (byte)0x82, (byte)0x84, (byte)0x86, (byte)0x88, (byte)0x8a, (byte)0x8c, (byte)0x8e,
            (byte)0x90, (byte)0x92, (byte)0x94, (byte)0x96, (byte)0x98, (byte)0x9a, (byte)0x9c, (byte)0x9e,
            (byte)0xa0, (byte)0xa2, (byte)0xa4, (byte)0xa6, (byte)0xa8, (byte)0xaa, (byte)0xac, (byte)0xae,
            (byte)0xb0, (byte)0xb2, (byte)0xb4, (byte)0xb6, (byte)0xb8, (byte)0xba, (byte)0xbc, (byte)0xbe,
            (byte)0xc0, (byte)0xc2, (byte)0xc4, (byte)0xc6, (byte)0xc8, (byte)0xca, (byte)0xcc, (byte)0xce,
            (byte)0xd0, (byte)0xd2, (byte)0xd4, (byte)0xd6, (byte)0xd8, (byte)0xda, (byte)0xdc, (byte)0xde,
            (byte)0xe0, (byte)0xe2, (byte)0xe4, (byte)0xe6, (byte)0xe8, (byte)0xea, (byte)0xec, (byte)0xee,
            (byte)0xf0, (byte)0xf2, (byte)0xf4, (byte)0xf6, (byte)0xf8, (byte)0xfa, (byte)0xfc, (byte)0xfe,
            0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
            0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
            0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
            0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
            (byte)0x9b, (byte)0x99, (byte)0x9f, (byte)0x9d, (byte)0x93, (byte)0x91, (byte)0x97, (byte)0x95,
            (byte)0x8b, (byte)0x89, (byte)0x8f, (byte)0x8d, (byte)0x83, (byte)0x81, (byte)0x87, (byte)0x85,
            (byte)0xbb, (byte)0xb9, (byte)0xbf, (byte)0xbd, (byte)0xb3, (byte)0xb1, (byte)0xb7, (byte)0xb5,
            (byte)0xab, (byte)0xa9, (byte)0xaf, (byte)0xad, (byte)0xa3, (byte)0xa1, (byte)0xa7, (byte)0xa5,
            (byte)0xdb, (byte)0xd9, (byte)0xdf, (byte)0xdd, (byte)0xd3, (byte)0xd1, (byte)0xd7, (byte)0xd5,
            (byte)0xcb, (byte)0xc9, (byte)0xcf, (byte)0xcd, (byte)0xc3, (byte)0xc1, (byte)0xc7, (byte)0xc5,
            (byte)0xfb, (byte)0xf9, (byte)0xff, (byte)0xfd, (byte)0xf3, (byte)0xf1, (byte)0xf7, (byte)0xf5,
            (byte)0xeb, (byte)0xe9, (byte)0xef, (byte)0xed, (byte)0xe3, (byte)0xe1, (byte)0xe7, (byte)0xe5
    };
    private static final byte[] GALOIS_MULT3 = {
            0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
            0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
            0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
            0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
            (byte)0xc0, (byte)0xc3, (byte)0xc6, (byte)0xc5, (byte)0xcc, (byte)0xcf, (byte)0xca, (byte)0xc9,
            (byte)0xd8, (byte)0xdb, (byte)0xde, (byte)0xdd, (byte)0xd4, (byte)0xd7, (byte)0xd2, (byte)0xd1,
            (byte)0xf0, (byte)0xf3, (byte)0xf6, (byte)0xf5, (byte)0xfc, (byte)0xff, (byte)0xfa, (byte)0xf9,
            (byte)0xe8, (byte)0xeb, (byte)0xee, (byte)0xed, (byte)0xe4, (byte)0xe7, (byte)0xe2, (byte)0xe1,
            (byte)0xa0, (byte)0xa3, (byte)0xa6, (byte)0xa5, (byte)0xac, (byte)0xaf, (byte)0xaa, (byte)0xa9,
            (byte)0xb8, (byte)0xbb, (byte)0xbe, (byte)0xbd, (byte)0xb4, (byte)0xb7, (byte)0xb2, (byte)0xb1,
            (byte)0x90, (byte)0x93, (byte)0x96, (byte)0x95, (byte)0x9c, (byte)0x9f, (byte)0x9a, (byte)0x99,
            (byte)0x88, (byte)0x8b, (byte)0x8e, (byte)0x8d, (byte)0x84, (byte)0x87, (byte)0x82, (byte)0x81,
            (byte)0x9b, (byte)0x98, (byte)0x9d, (byte)0x9e, (byte)0x97, (byte)0x94, (byte)0x91, (byte)0x92,
            (byte)0x83, (byte)0x80, (byte)0x85, (byte)0x86, (byte)0x8f, (byte)0x8c, (byte)0x89, (byte)0x8a,
            (byte)0xab, (byte)0xa8, (byte)0xad, (byte)0xae, (byte)0xa7, (byte)0xa4, (byte)0xa1, (byte)0xa2,
            (byte)0xb3, (byte)0xb0, (byte)0xb5, (byte)0xb6, (byte)0xbf, (byte)0xbc, (byte)0xb9, (byte)0xba,
            (byte)0xfb, (byte)0xf8, (byte)0xfd, (byte)0xfe, (byte)0xf7, (byte)0xf4, (byte)0xf1, (byte)0xf2,
            (byte)0xe3, (byte)0xe0, (byte)0xe5, (byte)0xe6, (byte)0xef, (byte)0xec, (byte)0xe9, (byte)0xea,
            (byte)0xcb, (byte)0xc8, (byte)0xcd, (byte)0xce, (byte)0xc7, (byte)0xc4, (byte)0xc1, (byte)0xc2,
            (byte)0xd3, (byte)0xd0, (byte)0xd5, (byte)0xd6, (byte)0xdf, (byte)0xdc, (byte)0xd9, (byte)0xda,
            (byte)0x5b, (byte)0x58, (byte)0x5d, (byte)0x5e, (byte)0x57, (byte)0x54, (byte)0x51, (byte)0x52,
            (byte)0x43, (byte)0x40, (byte)0x45, (byte)0x46, (byte)0x4f, (byte)0x4c, (byte)0x49, (byte)0x4a,
            (byte)0x6b, (byte)0x68, (byte)0x6d, (byte)0x6e, (byte)0x67, (byte)0x64, (byte)0x61, (byte)0x62,
            (byte)0x73, (byte)0x70, (byte)0x75, (byte)0x76, (byte)0x7f, (byte)0x7c, (byte)0x79, (byte)0x7a,
            (byte)0x3b, (byte)0x38, (byte)0x3d, (byte)0x3e, (byte)0x37, (byte)0x34, (byte)0x31, (byte)0x32,
            (byte)0x23, (byte)0x20, (byte)0x25, (byte)0x26, (byte)0x2f, (byte)0x2c, (byte)0x29, (byte)0x2a,
            (byte)0x0b, (byte)0x08, (byte)0x0d, (byte)0x0e, (byte)0x07, (byte)0x04, (byte)0x01, (byte)0x02,
            (byte)0x13, (byte)0x10, (byte)0x15, (byte)0x16, (byte)0x1f, (byte)0x1c, (byte)0x19, (byte)0x1a
    };


    private static final int[] R_CONST = {0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000};

    private int[] cipherKey = new int[4];
    private String inputText;
    private byte[][] expandedKeys = new byte[10][16];
    private byte[][] state = new byte[4][4];

    public Rijndael(String inputText, String cipherKey) {
        this.inputText = inputText;

        cipherKey = cipherKey.replaceAll(" ", "");
        for(int i=0; i<32; i+=8)
            this.cipherKey[i/8] = Integer.parseUnsignedInt(cipherKey.substring(i,i+8),16);

        keyExpansion();
    }

    private void keyExpansion() {
        int[] prevKey = cipherKey;
        int[] currKey = new int[4];

        for(int i=0; i<10; i++) {
            currKey[0] = (subWord(rotWord(prevKey[3])) ^ R_CONST[i]) ^ prevKey[0];
            currKey[1] = currKey[0] ^ prevKey[1];
            currKey[2] = currKey[1] ^ prevKey[2];
            currKey[3] = currKey[2] ^ prevKey[3];

            for(int j=0; j<16; j++)
                expandedKeys[i][j] = (byte) (((currKey[j/4] << (j%4*8)) >>> 24) & 0xff);
            prevKey = currKey;
        }
    }

    public String encode() {
        //TODO Convert plaintext to hexstring
        inputText = inputText.replaceAll(" ", "");

        byte[] keyBytes = new byte[16];

        for(int i=0; i<16; i++)
            keyBytes[i] = (byte) (((cipherKey[i/4] << i*8) >>> 24) & 0xff);

        //Creates State and XORs with initial key
        for(int i=0; i<4; i++) {
            for(int j=0; j<4; j++) {
                state[j][i] = (byte) (((Character.digit(inputText.charAt(i*8+j*2),16) << 4) +
                        Character.digit(inputText.charAt(i*8+j*2+1),16)) ^ keyBytes[i*4+j]);
            }
        }

        for(int round=0; round<9; round++) {
            subBytes();
            shiftRows();
            mixColumns();
            addRoundKey(round);
        }

        subBytes();
        shiftRows();
        addRoundKey(9);



        return "";
    }

    private int rotWord(int n) {
        return n << 8 | n >>> 24;
    }

    private int subWord(int n) {
        return ((S_BOX[n>>>24] & 0xff) << 24) |
                ((S_BOX[(n<<8) >>>24] & 0xff)<< 16) |
                ((S_BOX[(n<<16) >>>24] & 0xff)<< 8) |
                ((S_BOX[(n<<24) >>>24] & 0xff));
    }

    private void addRoundKey(int r) {
        for(int i=0; i<4; i++) {
            for(int j=0; j<4; j++) {
                state[j][i] ^= expandedKeys[r][i*4 + j];
            }
        }
    }

    private void subBytes() {
        for(int i=0; i<4; i++) {
            for(int j=0; j<4; j++) {
                state[j][i] = S_BOX[state[j][i] & 0xff];
            }
        }
    }

    private void shiftRows() {
        for(int i=1; i<4; i++) {
            byte[] tempRow = Arrays.copyOf(state[i],4);
            for(int j=0; j<4; j++) {
                state[i][j] = tempRow[(j+i)%4];
            }
        }
    }

    private void mixColumns() {
        for(int j=0; j<4; j++) {
            byte[] tempCol = new byte[4];
            for (int i = 0; i < 4; i++)
                tempCol[i] = state[i][j];

            state[0][j] = (byte) (GALOIS_MULT2[tempCol[0] & 0xff] ^ GALOIS_MULT3[tempCol[1] & 0xff] ^ tempCol[2] ^ tempCol[3]);
            state[1][j] = (byte) (tempCol[0] ^ GALOIS_MULT2[tempCol[1] & 0xff] ^ GALOIS_MULT3[tempCol[2] & 0xff] ^ tempCol[3]);
            state[2][j] = (byte) (tempCol[0] ^ tempCol[1] ^ GALOIS_MULT2[tempCol[2] & 0xff] ^ GALOIS_MULT3[tempCol[3] & 0xff]);
            state[3][j] = (byte) (GALOIS_MULT3[tempCol[0] & 0xff] ^ tempCol[1] ^ tempCol[2] ^ GALOIS_MULT2[tempCol[3] & 0xff]);
        }
    }
}
